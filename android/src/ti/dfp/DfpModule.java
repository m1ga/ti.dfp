/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.dfp;

import android.location.Location;
import android.os.Bundle;
import com.google.android.gms.ads.AdSize;
import com.google.android.gms.ads.identifier.AdvertisingIdClient;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import java.io.IOException;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;

@Kroll.module(name = "Dfp", id = "ti.dfp")
public class DfpModule extends KrollModule
{
	// Standard Debugging variables
	private static final String LCAT = "ti.dfp";
	private static final boolean DBG = TiConfig.LOGD;

	// note -- I would have preferred to just expose
	// PublisherAdRequest.DEVICE_ID_EMULATOR as the constant, but I got nasty
	// build errors like [exec] jni/ti.dfp.DfpModule.cpp: In static member
	// function 'static v8::Handle<v8::FunctionTemplate>
	// ti::dfp::DfpModule::getProxyTemplate()': [exec]
	// jni/ti.dfp.DfpModule.cpp:113:3: error: no matching function for call to
	// 'v8::String::New(_jobject*&)'

	@Kroll.constant
	public static final String EMULATOR_ID = "[[[[[ -- PublisherAdRequest.DEVICE_ID_EMULATOR -- ]]]]]";

	public static String[] TEST_DEVICES = {};
	public static String ADUNIT_ID;

	public static Location LOCATION = null;

	public static Bundle CUSTOM_TARGETING = null;

	public static Boolean SUPPRESS_SCROLL = true;

	public static Integer ADHEIGHT = 0;
	public static Integer ADWIDTH = 0;

	public static AdSize[] AD_SIZES;

	public static String PROPERTY_COLOR_BG = "adBackgroundColor";
	public static String PROPERTY_COLOR_BG_TOP = "backgroundTopColor";
	public static String PROPERTY_COLOR_BORDER = "borderColor";
	public static String PROPERTY_COLOR_TEXT = "textColor";
	public static String PROPERTY_COLOR_LINK = "linkColor";
	public static String PROPERTY_COLOR_URL = "urlColor";

	private String advertisingId = "";
	private boolean adTrackingDisabled = false;

	public DfpModule()
	{
		super();

		Log.d(LCAT, "starting new thread to get advertising ID");
		Thread t = new Thread(new Runnable() {
			@Override
			public void run()
			{
				try {
					AdvertisingIdClient.Info adInfo =
						AdvertisingIdClient.getAdvertisingIdInfo(TiApplication.getInstance());
					finished(adInfo);
					return;
				} catch (IOException e) {
					Log.w(LCAT,
						  "call to getAdvertisingInfo() failed; could not make connection to google play services");
				} catch (IllegalStateException e) {
					Log.w(LCAT, "call to getAdvertisingInfo() failed; method called on main thread");
				} catch (GooglePlayServicesNotAvailableException e) {
					Log.w(LCAT, "call to getAdvertisingInfo() failed; google play services not available");
				} catch (GooglePlayServicesRepairableException e) {
					Log.w(LCAT,
						  "call to getAdvertisingInfo() failed; recoverable error connecting to google play services");
				}

				finished(null);
			}
		});
		t.start();

		Log.d(LCAT, "module instantiated");
	}

	private void finished(final AdvertisingIdClient.Info adInfo)
	{
		if (adInfo == null) {
			Log.d(LCAT, "got null advertisingInfo");
			return;
		}

		Log.d(LCAT, "got non-null advertisingInfo...");
		advertisingId = adInfo.getId();
		Log.d(LCAT, "adInfo.getId(): " + advertisingId);
		adTrackingDisabled = adInfo.isLimitAdTrackingEnabled();
		if (adTrackingDisabled) {
			Log.d(LCAT, "adInfo.isLimitAdTrackingEnabled(): true");
		} else {
			Log.d(LCAT, "adInfo.isLimitAdTrackingEnabled(): false");
		}
		return;
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
	}

	// must be done before the call to instantiate the view
	@Kroll.method
	public void setAdUnitId(String adUnitId)
	{
		Log.d(LCAT, "setAdUnitId(): " + adUnitId);
		ADUNIT_ID = adUnitId;
	}

	@Kroll.method
	public String getAdvertisingId()
	{
		Log.d(LCAT, "getAdvertisingId(): " + advertisingId);
		return advertisingId;
	}

	@Kroll.method
	public boolean getAdTrackingDisabled()
	{
		if (adTrackingDisabled) {
			Log.d(LCAT, "getAdTrackingDisabled(): true");
		} else {
			Log.d(LCAT, "getAdTrackingDisabled(): false");
		}
		return adTrackingDisabled;
	}
}
